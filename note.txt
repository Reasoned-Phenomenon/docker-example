@ image 명령어

* docker image build
- 옵션
    -t : 이미지명:[태그] 형태로 작성
    -f : docker image build 명령어는 기본적으로 Dockerfile 을 찾는다. 특정 파일을 사용하려면 이 옵션을 사용
         eg. docker image build -f Dockerfile-test -t example:lastest
    --pull : FROM에 사용할 베이스 이미지를 강제로 새로 받아온다.
             eg. docker image build --pull=true -t example:lastest
             빌드 속도면에서는 조금 불리하다. 
             실무에서는 lastest로 지정하는 것은 피하자.

* docker image pull
eg. docker image pull jenkins:2.60.3-alpine
도커 이미지를 다운로드 한다.
축약어로 docker pull 만 사용해도 됨.
특정 태그를 지정할 수 있음. -> dockerHub에서 확인 가능.
cpu 아키텍처에 따라서 사용할 수 없는 이미지도 있음.
windows 사용자는 큰 문제 없음.

* docker image ls
다운로드 된 도커 이미지 목록 조회
vscode extension에서도 볼 수 있음.

* docker image tag
eg. docker image tag example/echo:lastest example/echo:0.1
이미지에 태그를 붙일때 사용(추가할 때 사용한다고 생각하면 됨)


* registry
회사에서 사용하는 경우, private한 registry가 필요 할 수 있음.
docker hub 에서 registry 라고 검색하면, registry를 이미지로 받을 수 있음.
https://hub.docker.com/_/registry

docker pull registry 말고,
docker run -d -p 5000:5000 --restart always --name registry registry:2
라고 입력하면 사용할 수 있음.
private 하게 사용하는 registry가 생성 된 것.

docker image tag example/echo:0.1 localhost:5000/example/echo:0.1

태그 변경으로 로컬 registry에 등록하는 것.
push를 해줘야함.

vscode의 extension에 REGISTRIES에서 Connect Registry... 를 누르고
Generic Registry V2를 선택 후 
Registry URL은 default가 http://localhost:5000
Registry Username, Registry Password는 그냥 엔터치면 됨.

push는
docker image push localhost:5000/example/echo:0.1

#############################################################################

@ container 명령어

* 생애주기
컨테이너의 상태에는 실행 중 상태 / 정지 상태 / 파기 상태가 있음.
정지 상태는 프로세스가 죽으면 컨테이너가 동작하지 않는 상태. 
파기 상태는 컨테이너 자체를 없애버리는 상태.
정지상태는 동작하진 않지만 종료시점의 상태가 저장되어 있는 상태. 완전히 사라지지 않았음.
파기 상태는 정지됐고, 종료시점의 상태가 저장되어 있지 않고, 최종적으로 삭제된 상태.

docker extension에서,
실행중인 컨테이너 우클릭 -> stop 하면 정지 상태.
정지 상태인 컨테이너 우클릭 -> remove 하면 파기 상태.

* docker container run
container 없이 run만 써도 작동하지만, image와 구분하기 위해서 붙여주는 편.
이미지 작업 중인지, 컨테이너 작업 중인지 헷갈려서 붙이는 걸 선호.
eg. docker container run -d -p 3000:3000 example/echo:lastest

docker container run 명령어 실행시 Dockerfile의 CMD가 실행됨.
-d 옵션 : background로 실행. 프로세스에게 명령어를 전달하고 다른 명령어를 실행할 수 있음.
-p 옵션 : port 포워딩. 컨테이너를 실행하는 컴퓨터의 3000포트를 이미지 내부의 3000포트로 연결하겠다는 의미
         컨테이너 외부의 포트와 컨테이너 내부의 포트를 연결해주는 것.
         작성한 예시에서는 외부에서 접근이 필요 없으므로 포트포워딩이 필요 없지만,
         웹서비스를 컨테이너 내부에서 실행시에는 포트포워딩이 필요함

docker container -d example/echo:lastest
run 실행시 cli에 출력되는 문자열은 컨테이너의 아이디.
eg. cdec18e19106d7b8f2598812c69e13cff1389f5ff9944cba7fca0f9a80148541
예시는 컨테이너 생성 후 sh 하나만 실행 후 종료되어서 vscode extension에서 보면 정지 상태로 보임.
백그라운드에서 실행했기 때문에 cli에 echo의 결과가 출력되지 않음.
포그라운드에서 실행하면 출력됨.(-d 옵션 제거)



# boot 프로젝트 내부에 Dockerfile 생성
# alpine은 jdk를 설치해야해서, jdk까지 설치되어 있는 openjdk 설치
FROM openjdk:17

# 도커파일이 있는 경로에서 시작해서, jar파일을 전송하고, 파일명은 다음 명령어를 쉽게 사용하기 위해 app.jar로 변경
COPY ./build/libs/bootdocker-0.0.1-SNAPSHOT.jar /usr/local/bin/app.jar
RUN chmod +x /usr/local/bin/app.jar

# java -jar app.jar 를 사용하려면, 띄워쓰기 단위로 분리해야함.
CMD ["java", "-jar", "/usr/local/bin/app.jar"]

# 외부의 8082 포트를 컨테이너 내부의 8080으로 연결
# name은 따로 지정하지 않으면 자동으로 생성 (eg, intelligent_swirles)
docker container run -d -p 8082:8080 bootdocker:latest

# ls로 확인한 컨테이너의 ID(또는 name)를 사용해서 stop
docker container ls
docker container stop 669713888c45

# -a 옵션으로 정지상태의 컨테이너도 확인
# ls -a 로 확인한 컨테이너의 ID(또는 name)를 사용해서 restart
docker container ls -a
docker container restart 669713888c45

# 컨테이너 파기 -> 컨테이너의 ID(또는 name)를 사용해서 rm
# 실행중일때는 remove 불가 -> 정지해야함.
# 강제로 정지후 파기하는 옵션 -> -f
docker container rm -f 669713888c45

# name 부여 하면서 container 실행
# 이미지명(bootdocker:latest)은 명령어의 제일 끝에 두는 것이 좋음.
docker container run -d -p 8082:8080 --name bootdocker bootdocker:latest

# 이미지명으로 stop, restart 가능.
docker container stop bootdocker
docker container restart bootdocker

# 대부분의 명령어는 tool을 이용하면 돼서 다 외울 필요는 없음.
# log, exec
# tool 을 이용해서 attach shell을 사용하면, exec를 사용 할 수 있음. (아래 명령어를 실행하는 것과 같음)
docker exec -it c70135f72e78ccac6b7a0657dfa6b69e783869dd52fa3dcce678bcf4edd89ed4 sh



@ 도커운영과 관리 명령어 
docker container prune
docker image prune

# 명령어를 사용하면, 파기하지 않은 컨테이너를 파기해줌.
docker container prune

# 태그가 붙지 않거나 사용하지 않는 이미지 삭제 - (이미지 생성시 보통 태그를 붙임)
docker image prune

# prune 사용시 조심해야함.

# 도커 상태 확인
# 도커를 서버에서 생으로 사용하는 경우는 거의 없기 때문에, 많이 사용하지는 않음.
docker container stats

