@ image 명령어

* docker image build
- 옵션
    -t : 이미지명:[태그] 형태로 작성
    -f : docker image build 명령어는 기본적으로 Dockerfile 을 찾는다. 특정 파일을 사용하려면 이 옵션을 사용
         eg. docker image build -f Dockerfile-test -t example:lastest
    --pull : FROM에 사용할 베이스 이미지를 강제로 새로 받아온다.
             eg. docker image build --pull=true -t example:lastest
             빌드 속도면에서는 조금 불리하다. 
             실무에서는 lastest로 지정하는 것은 피하자.

* docker image pull
eg. docker image pull jenkins:2.60.3-alpine
도커 이미지를 다운로드 한다.
축약어로 docker pull 만 사용해도 됨.
특정 태그를 지정할 수 있음. -> dockerHub에서 확인 가능.
cpu 아키텍처에 따라서 사용할 수 없는 이미지도 있음.
windows 사용자는 큰 문제 없음.

* docker image ls
다운로드 된 도커 이미지 목록 조회
vscode extension에서도 볼 수 있음.

* docker image tag
eg. docker image tag example/echo:lastest example/echo:0.1
이미지에 태그를 붙일때 사용(추가할 때 사용한다고 생각하면 됨)


* registry
회사에서 사용하는 경우, private한 registry가 필요 할 수 있음.
docker hub 에서 registry 라고 검색하면, registry를 이미지로 받을 수 있음.
https://hub.docker.com/_/registry

docker pull registry 말고,
docker run -d -p 5000:5000 --restart always --name registry registry:2
라고 입력하면 사용할 수 있음.
private 하게 사용하는 registry가 생성 된 것.

docker image tag example/echo:0.1 localhost:5000/example/echo:0.1

태그 변경으로 로컬 registry에 등록하는 것.
push를 해줘야함.

vscode의 extension에 REGISTRIES에서 Connect Registry... 를 누르고
Generic Registry V2를 선택 후 
Registry URL은 default가 http://localhost:5000
Registry Username, Registry Password는 그냥 엔터치면 됨.

push는
docker image push localhost:5000/example/echo:0.1

#############################################################################

@ container 명령어

* 생애주기
컨테이너의 상태에는 실행 중 상태 / 정지 상태 / 파기 상태가 있음.
정지 상태는 프로세스가 죽으면 컨테이너가 동작하지 않는 상태. 
파기 상태는 컨테이너 자체를 없애버리는 상태.
정지상태는 동작하진 않지만 종료시점의 상태가 저장되어 있는 상태. 완전히 사라지지 않았음.
파기 상태는 정지됐고, 종료시점의 상태가 저장되어 있지 않고, 최종적으로 삭제된 상태.

docker extension에서,
실행중인 컨테이너 우클릭 -> stop 하면 정지 상태.
정지 상태인 컨테이너 우클릭 -> remove 하면 파기 상태.

* docker container run
container 없이 run만 써도 작동하지만, image와 구분하기 위해서 붙여주는 편.
이미지 작업 중인지, 컨테이너 작업 중인지 헷갈려서 붙이는 걸 선호.
eg. docker container run -d -p 3000:3000 example/echo:lastest

docker container run 명령어 실행시 Dockerfile의 CMD가 실행됨.
-d 옵션 : background로 실행. 프로세스에게 명령어를 전달하고 다른 명령어를 실행할 수 있음.
-p 옵션 : port 포워딩. 컨테이너를 실행하는 컴퓨터의 3000포트를 이미지 내부의 3000포트로 연결하겠다는 의미
         컨테이너 외부의 포트와 컨테이너 내부의 포트를 연결해주는 것.
         작성한 예시에서는 외부에서 접근이 필요 없으므로 포트포워딩이 필요 없지만,
         웹서비스를 컨테이너 내부에서 실행시에는 포트포워딩이 필요함

docker container -d example/echo:lastest
run 실행시 cli에 출력되는 문자열은 컨테이너의 아이디.
eg. cdec18e19106d7b8f2598812c69e13cff1389f5ff9944cba7fca0f9a80148541
예시는 컨테이너 생성 후 sh 하나만 실행 후 종료되어서 vscode extension에서 보면 정지 상태로 보임.
백그라운드에서 실행했기 때문에 cli에 echo의 결과가 출력되지 않음.
포그라운드에서 실행하면 출력됨.(-d 옵션 제거)



# boot 프로젝트 내부에 Dockerfile 생성
# alpine은 jdk를 설치해야해서, jdk까지 설치되어 있는 openjdk 설치
FROM openjdk:17

# 도커파일이 있는 경로에서 시작해서, jar파일을 전송하고, 파일명은 다음 명령어를 쉽게 사용하기 위해 app.jar로 변경
COPY ./build/libs/bootdocker-0.0.1-SNAPSHOT.jar /usr/local/bin/app.jar
RUN chmod +x /usr/local/bin/app.jar

# java -jar app.jar 를 사용하려면, 띄워쓰기 단위로 분리해야함.
CMD ["java", "-jar", "/usr/local/bin/app.jar"]

# 외부의 8082 포트를 컨테이너 내부의 8080으로 연결
# name은 따로 지정하지 않으면 자동으로 생성 (eg, intelligent_swirles)
docker container run -d -p 8082:8080 bootdocker:latest

# ls로 확인한 컨테이너의 ID(또는 name)를 사용해서 stop
docker container ls
docker container stop 669713888c45

# -a 옵션으로 정지상태의 컨테이너도 확인
# ls -a 로 확인한 컨테이너의 ID(또는 name)를 사용해서 restart
docker container ls -a
docker container restart 669713888c45

# 컨테이너 파기 -> 컨테이너의 ID(또는 name)를 사용해서 rm
# 실행중일때는 remove 불가 -> 정지해야함.
# 강제로 정지후 파기하는 옵션 -> -f
docker container rm -f 669713888c45

# name 부여 하면서 container 실행
# 이미지명(bootdocker:latest)은 명령어의 제일 끝에 두는 것이 좋음.
docker container run -d -p 8082:8080 --name bootdocker bootdocker:latest

# 이미지명으로 stop, restart 가능.
docker container stop bootdocker
docker container restart bootdocker

# 대부분의 명령어는 tool을 이용하면 돼서 다 외울 필요는 없음.
# log, exec
# tool 을 이용해서 attach shell을 사용하면, exec를 사용 할 수 있음. (아래 명령어를 실행하는 것과 같음)
docker exec -it c70135f72e78ccac6b7a0657dfa6b69e783869dd52fa3dcce678bcf4edd89ed4 sh



@ 도커운영과 관리 명령어 
docker container prune
docker image prune

# 명령어를 사용하면, 파기하지 않은 컨테이너를 파기해줌.
docker container prune

# 태그가 붙지 않거나 사용하지 않는 이미지 삭제 - (이미지 생성시 보통 태그를 붙임)
docker image prune

# prune 사용시 조심해야함.

# 도커 상태 확인
# 도커를 서버에서 생으로 사용하는 경우는 거의 없기 때문에, 많이 사용하지는 않음.
docker container stats



@ 도커 컴포즈
컨테이너 관리하는 것을 직접 cli로 다 하는 것은 번거로움. -> 컴포즈
yaml 형식의 실행할 수 있는 설정 파일을 작성.

파일명은 기본적으로
docker-compose.yml

# version은 3으로 작성(버전업으로 인해 필요 없어짐)
# version: "3"
services:
  # bootdocker와 관련된 설정파일을 작성하겠다는 의미(services.컨테이너이름)
  # 설정파일 내에서 참조변수로도 사용됨.
  bootdocker:
    # 키: (한칸띄우고)value
    image: bootdocker:latest
    # 매핑할 포트가 여러개일 수도 있음.
    ports:
      # 목록이라는 의미에서 - 를 넣어줌
      - 8082:8080

#
docker-compose 라는 명령어가 있음.
docker desktop을 설치하면 docker-compose와 docker-swam이 자동으로 설치됨.
리눅스에서 docker만 설치했으면 docker-compose를 따로 설치해야할 수도 있음.

docker-compose help
=> docker compose 라고 가운데 '-'를 빼고 사용해야함(버전업?)

up -> docker-compose 파일을 이용해서 실행하는 명령어

docker compose up -d

docker-compose.yml이 default로 사용됨. 자동으로 찾아서 실행.
`version` is obsolete => version은 필요 없어짐.

옵션과 커맨드에 대해서만 공부하면 금방 할 수 있음.
쿠버네티스로 가면, 쿠버네티스의 설정이 있기때문에 그것을 이용하면 됨.

--dry-run 옵션 : 실제로 동작하지는 않고, 어떻게 동작하는지 보고싶을 때(gradle에도 동일한 옵션이 있음)
docker compose --dry-run up -d

-f 옵션 :설정 파일명을 지정할 때
docker compose -f bootdocker-compose.yml up -d

docker compose --dry-run -f bootdocker-compose.yml up -d

명령어를 몰라도 tool에서 기능을 이용할 수 있음.

컨테이너 실행시 build도 할 수 있음.

    # image: bootdocker:latest
    # image 속성 대신 build 넣으면 됨.
    build: .

. 을 사용하는 이유는, Dockerfile과 docker-compose.yml 파일이 같은 위치에 있기 때문.
파일명이 다르면, 파일명을 입력하면 됨.
=> docker compose --dry-run -f bootdocker-compose.yml up -d
dry-run으로 확인.

컨테이너의 이름은 
이미지-컨테이너명-숫자
로 자동 생성됨.
수동으로 cli로 컨테이너 생성시에는 name 옵션을 주는 것을 추천하지만,
compose는 컨테이너를 여러번 생성할 수 있으므로 name이 중요하지 않음.

구글에서 docker compose quickstart 검색해서 추가적인 내용 확인.
ENV 등 다른 속성 공부하면 좋음.

services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"

services에 web, redis 등 다른 속성이 있음.
docker compose 를 사용하는 이유는 여러 컨테이너를 실행시키기 위함임.
-> 동시에 여러 컨테이너를 띄울 수 있음.

구글에서 젠킨스 master, slave 구성하는 법 검색해보면 좋음.
-> master 젠킨스에서는 관리, slave 젠킨스에서는 실제로 컨테이너 실행 등 구분해서 사용할 수도 있음.



@ 퍼시스턴스 다루기
데이터 볼륨
컨테이너는 파기될 수 있기 때문에, 파일을 저장하면 안 됨.(컨테이너가 파기될 때 사라지므로)머어
호스트의 특정 경로를 연결해주는 옵션이 -v 옵션.
v는 volume의 약자.
docker container run -v /tempFile:/workspace example/echo:latest
-> 컨테이너의 /workspace 경로에 파일이 생성되면, 호스트의 /tempFile 경로에 파일이 동일하게 생성됨.
=> compose의 볼륨 설정으로 대체

    # 여러개가 있을 수 있으므로, 목록형태
    # 디렉터리가 없어도 실행 됨. 자동으로 생성됨.
    volumes:
      - ./tempFile:/var/bootdocker-file

docker compose -f bootdocker-compose.yml up -d
명령을 실행하면,
./tempfile 디렉터리가 생성됨.
실행된 컨테이너에 접속하려면
docker container exec -it 컨테이너명/ID sh
또는
tool에서 attach shell 하거나 파일 목록을 확인 할 수 있음.
nginx 등에서 config파일을 이렇게 볼륨을 연결해서 많이 사용함.
./tempfile 디렉터리에 config.cfg 파일을 생성하면, /var/bootdocker-file 경로에도 동일하게 파일이 생성됨.

데이터 볼륨 컨테이너
데이터 볼륨 부분을 아예 컨테이너로 올리는 방법.
-> 생략


@ 컨테이너 배치 전략 - 도커 스웜
쿠버네티스를 사용하기 전 사전지식을 확보하기 위함.

물리적으로 여러 서버를 하나의 서버처럼 사용할 수 있도록 묶어주는 것을 클러스터라고 함.
묶인 클로스터를 관리하는 오케스트레이션 도구가 필요한데, 그 중 하나가 도커 스웜.
가장 많이 사용되는 오케스트레이션 도구는 쿠버네티스.

컴포즈는 하나의 이미지를 다루고자 할 때 사용.
스웜은 클로스터 구축해주는 것.

도커가 물리적 서버 하나에 설치되어 있으면, 도커가 설치된 서버를 도커 호스트라고 함.
도커 호스트라고 표현하면, 물리적 서버 하나를 의미함.

스웜에서는 master, worker라는 물리적 서버가 존재함.
docker in docker 라는 이미지로 가상으로 물리적 서버를 구성해서 실습.

스웜으로 묶어두면, 물리적 서버의 위치는 중요하지 않고, 스웜이 관리해줌.

스웜 내부에서 오케스트레이션할 때 필요한 개념
서비스, 스택
외부에서 스웜에 접근할 때는, master(매니저)의 열어놓은 포트에서 프록시를 이용해 경로를 설정.

블로그(https://ohhoonim.blogspot.com/2024/05/blog-post_12.html) 에서
docker-compose.yml 파일 복사 후 실행(vscode tool 사용)